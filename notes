//try this inputs
1; 

1 + 3 * 3;

2-3; //the negative value is printed with ~

0X123; //declaration with hexadecimal

23.0; //declared as a real number

3E-3; //scientific notations

1 = 2; //bool type

1.0=2.0; //TYPE ERROR
//comparison error, you can compare integers and strings but not reals

"string" = 2 //TYPE ERROR

4.0+3; //TYPE ERROR

#"a"; //char declaration

12.0/4.0; //division is valid only on reals

//what if i want to divide integers?
4 div 3; // gives the integer part

4 mod 3; //gives the remainder

43 div (8 mod 3) * 5; //you can concatenate expressions using pharentesis, execution follows math rules so * / first

"hou" ^  "se"; //concat operator, works only on strings with strings not character

//other comparator different from = : < > >= <= 
7 <> 8 //true, it means not equal

//you can use comparators < > for strings and it considers character by character from the left;

"ab"<"abc"; // true

1<2 orelse 2>0; //true
1>0 andalso 3 > 4; //false

not 1<2; //error
not (1<2); //false

//conditional blocks
if 1<2 then 3+3 else 5+6;
//the else is mandatory and the return in then and else block must have the same type

//COMPOUND TYPES
+(1,2) //calls the plus
//it has only ONE argument
//the argument is a constructed tipe called a pair of integers
(1,2); //returns a new type value int * int
(1.0,2.0); //returns a new type value real * real


//EXPLICIT DECLARATION 
real 4; //4.0 
ceil 3.5; //rounds to next higher integer
floor 3.5; //rounds to next lower integer
floor ~3.5; //rounds to 4
trunc ~3.5 //just integer part ~3
round 3.5 //rounds to 4

ord #"A"; //return integer ascii code

chr (97); //returns corresponding ascii character

//VARIABLES DECLARATION
val pi = 3; //integer
val pi = 3.14; //reassign to real

val radius = 4.0;
val area = pi * radius; //notice that now if we change radius area stay fixed

//TUPLES
(2,3); // int * int
((2,3),4); //(int * int) * int
t=(("str", 4 ,3.0)*"str"); // (str * int * real) * string;

//how to access the components?
t = (1,2);
#1 t; //1
#4 t; //error

//LIST
[1,0,2]//int list
[1.3,0.3,2.3]//real list
[1,0.2,2]//error
[ ]//'a list no type

//list operators
l =[1,0,2] 
hd l;  //head 1
tl l; //[0,2]
m=[1];
tl m; //[ ] of type int
2 :: [1,0]; //[2, 1,0]
nil; //declare empty list
2 :: nil; //[2]
[1]@[2]; //list concat [1,2]
explode "abcd"; //[#"a",#"b",#"c",#"d"]
implode nil; //empty string ""

//TYPES SYSTEM
//basic types 
int
real
bool
char
string

//other types
[1,0,2]//int list
("ciao" ,[1,0,2] ) //tuple
[(2,3),(0,1)] //list of tuples


//try to write this types
int list list list 
(int * char) list 
striing list * (int * (real * string )* int)